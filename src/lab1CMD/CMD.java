/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lab1CMD;

/**
 *
 * @author andre
 */

import java.awt.event.KeyEvent;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;



    
public class CMD extends javax.swing.JFrame {

    /**
     * Creates new form CMD
     */
    funciones cmd;
    public CMD() {
        initComponents();
        cmd = new funciones("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        cmdTexto = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        cmdTexto.setBackground(new java.awt.Color(0, 0, 0));
        cmdTexto.setColumns(20);
        cmdTexto.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        cmdTexto.setForeground(new java.awt.Color(255, 255, 255));
        cmdTexto.setRows(5);
        cmdTexto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdTextoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(cmdTexto);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
   
    
    private void parseCommand() {
        String line = indent();
        String[] args = line.trim().split(" ");
      
        
        switch (args[0].toLowerCase()) {
            case "cd":
              
                if (args.length == 1) {
                    imprimirEnArea("Ingrese un directorio para cambiar.");
                    break;
                }
                cmd.Cd(args[1]);
                break;
                
            case "...":
                cmd.Cd("..");
                break;
                
            case "dir" :
                
                imprimirEnArea(cmd.listar(cmd.getCurrentPath()));
                break;
                
            case "mkdir":
                
                if (args.length == 1) {
                    imprimirEnArea("Ingrese un directorio para crear.");
                    break;
                }
                imprimirEnArea(cmd.Mkdir(cmd.getCurrentPath() + "/" + args[1]));
                break;
                
            case "exit":
                dispose();
                break;
                
            case "mfile":
                if (args.length == 1) {
                    imprimirEnArea("Ingrese el nombre del archivo.");
                    break;
                }
                imprimirEnArea(cmd.Mfile(cmd.getCurrentPath() + "/" + args[1]));
                break;
                
            case "rm":
                if (args.length == 1) {
                    imprimirEnArea("Ingrese la carpeta/archivo que desea eliminar.");
                    break;
                }
                
                File destino = new File(cmd.getCurrentPath() + "/" + args[1]);
                imprimirEnArea(cmd.Rm(destino));
                break;
            case "date":
                Calendar date = Calendar.getInstance();
                int mes=date.get(Calendar.MONTH)+1;
                imprimirEnArea(date.get(Calendar.DATE)+" / "+mes+" / "+date.get(Calendar.YEAR));
                break;
                
            case "time":
                showTime();
                break;
                
            case "rd":
                if (args.length == 1) {
                    imprimirEnArea("Ingrese el archivo que desea leer.");
                    break;
                }
                
                imprimirEnArea(cmd.leer(cmd.getCurrentPath() + "/" + args[1].trim()));
                break;
                
                
            case "wr":
                if (args.length < 3) {
                    imprimirEnArea("Ingrese el archivo y contenido que desea escribir\nEjemplo: wr <archivo> <mensaje>");
                    break;
                }
                
                String mensaje = "";
                
                for (int i = 2; i<args.length;i++){
                    mensaje += args[i] + " ";
                }
                
               
                imprimirEnArea(cmd.escribir(mensaje, cmd.getCurrentPath() + "/" + args[1]));
                break;
        }
    }
    
     private void showTime() {
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
        String currentTime = timeFormat.format(new Date());
        cmdTexto.append("\nCurrent time: " + currentTime);
    }
    
    private String indent() {
        String lineNormal = "";
        String lineReverse = "";
        String consoleText = cmdTexto.getText();         
        
        // Tomar de la consola la linea
        for (int i = consoleText.length() - 1; i >= 0; i--) {
            if (consoleText.charAt(i) == '>') break;
            lineReverse += consoleText.charAt(i);
        }
        
        // Invertir y guardar
        for (int i = lineReverse.length()-1;i >= 0; i--) {
            lineNormal += lineReverse.charAt(i);
        }
        
        return lineNormal;
        
    }
    
    private void imprimirEnArea(String mensaje){
        String TextoAgregado=cmdTexto.getText();
        TextoAgregado += "\n" + mensaje;
        cmdTexto.setText(TextoAgregado);
    }
    private void cmdTextoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdTextoKeyPressed
        int[] codigosProhibidos = {27, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 19, 155, 127, 36, 33, 34, 35, 16, 38, 37, 40, 38, 39, 17, 18};
        
        for (int codigo:codigosProhibidos) {
            if (evt.getKeyCode() == codigo) return;        
        }
        
        if (evt.getKeyCode() == 8) {
            String newText = cmdTexto.getText();
            
            if (newText.charAt(newText.length() - 1) == '>') {
            } else {
                newText = newText.substring(0, newText.length()-1);
                cmdTexto.setText(newText);
            }
            
            return;

        } else if(KeyEvent.VK_ENTER==evt.getKeyCode()) {
            parseCommand();
            cmdTexto.setText(cmdTexto.getText() + "\n" + cmd.getCurrentPath() + ">");
            return;
        }
        
        
    }//GEN-LAST:event_cmdTextoKeyPressed
    
  
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CMD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea cmdTexto;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
